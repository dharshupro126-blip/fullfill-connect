rules_version = '2';

// Helper functions to simplify rule definitions
function isSignedIn() {
  return request.auth != null;
}

function isOwner(userId) {
  return request.auth.uid == userId;
}

// Rules for each collection
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Donors Collection ---
    // Donors are companies or individuals providing food.
    match /donors/{donorId} {
      // Anyone authenticated can read donor profiles (e.g., for display on a map).
      allow read: if isSignedIn();
      // Only the authenticated owner can create their own donor profile.
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      // Only the owner can update their profile.
      allow update: if isSignedIn() && isOwner(resource.data.userId);
      // Deletes are disallowed for now to maintain data integrity.
      allow delete: if false;
    }

    // --- Receivers Collection ---
    // Receivers are organizations that get the food.
    match /receivers/{receiverId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      allow update: if isSignedIn() && isOwner(resource.data.userId);
      allow delete: if false;
    }

    // --- Volunteers Collection ---
    // Volunteers handle the delivery of food.
    match /volunteers/{volunteerId} {
      allow read: if isSignedIn();
      // A volunteer can only update their own status or location.
      // Other fields (like name, phone) should be updated via a backend process.
      allow update: if isSignedIn() && isOwner(resource.data.userId)
                    && request.resource.data.keys().hasOnly(['status', 'currentLocation', 'deviceToken']);
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      allow delete: if false;
    }

    // --- Listings Collection ---
    // Food donation posts from donors.
    match /listings/{listingId} {
      // Anyone can read available listings to find food.
      allow read: if true;
      // Only an authenticated donor can create a listing for themselves.
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.donorId;
      // Only the original donor can update or a function can update status.
      allow update: if isSignedIn() && request.auth.uid == resource.data.donorId;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.donorId;
    }

    // --- Deliveries Collection ---
    // Tracks a delivery from donor to receiver.
    match /deliveries/{deliveryId} {
      // Involved parties (donor, receiver, volunteer) can read the delivery details.
      allow read: if isSignedIn() && (
                    request.auth.uid == resource.data.donorId ||
                    request.auth.uid == resource.data.receiverId ||
                    request.auth.uid == resource.data.volunteerId
                  );
      // Deliveries are only created by Cloud Functions.
      allow create: if false;
      // Only the assigned volunteer can update the status.
      // The otpHash and otpExpiry should only be written by a function, not the client.
      allow update: if isSignedIn() && request.auth.uid == resource.data.volunteerId
                    && !("otpHash" in request.resource.data);
      allow delete: if false;
    }

    // --- Audit Logs Collection ---
    // For tracking important system events.
    match /auditLogs/{logId} {
      // Only backend functions can create logs.
      allow create: if false;
      // Logs are immutable.
      allow read, update, delete: if false;
    }
    
    // --- Containers (IoT) Collection ---
    // Tracks smart containers used for temperature-sensitive deliveries.
    match /containers/{containerId} {
      // Authenticated users (admins, assigned volunteers) can read container data.
      allow read: if isSignedIn();
      // Only backend functions can create or update container documents.
      // This prevents clients from tampering with thresholds or assignments.
      allow create, update, delete: if false;
    }
  }
}
